name: Performance Monitoring CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of performance test to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - core-vitals
          - load-testing
          - lighthouse

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_VERSION: '1.49.1'

jobs:
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'lighthouse' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm run start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: |
          npx wait-on http://localhost:3000 --timeout 60000
          sleep 10

      - name: Run Lighthouse CI
        run: npm run lighthouse:ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: |
            .lighthouseci/
            performance-reports/
          retention-days: 30

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.lighthouseci/lhr-*.json';
            
            // Read lighthouse results and create comment
            const comment = `## 🚀 Lighthouse Performance Results
            
            Performance audit completed! Check the artifacts for detailed reports.
            
            Key metrics analyzed:
            - First Contentful Paint (FCP)
            - Largest Contentful Paint (LCP)
            - First Input Delay (FID)
            - Cumulative Layout Shift (CLS)
            - Time to Interactive (TTI)
            
            [View detailed results in Actions artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  core-web-vitals:
    name: Core Web Vitals Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'core-vitals' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm run start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: |
          npx wait-on http://localhost:3000 --timeout 60000
          sleep 5

      - name: Run Core Web Vitals tests
        run: npm run test:performance:core-vitals
        env:
          CI: true

      - name: Upload Core Web Vitals results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: core-web-vitals-results
          path: |
            test/performance/results.json
            test/performance/baseline-results.json
            test-results/
          retention-days: 30

      - name: Performance regression check
        run: |
          echo "Checking for performance regressions..."
          if [ -f "test/performance/results.json" ]; then
            echo "✅ Performance results generated"
            # You can add custom regression analysis here
          else
            echo "⚠️ No performance results found"
          fi

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'load-testing' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm run start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: |
          npx wait-on http://localhost:3000 --timeout 60000
          sleep 5

      - name: Run Playwright load tests
        run: npm run test:performance:load
        env:
          CI: true

      - name: Run K6 load tests
        run: npm run test:load:k6
        continue-on-error: true

      - name: Run Autocannon load tests
        run: npm run test:load:autocannon
        continue-on-error: true

      - name: Upload load testing results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-testing-results
          path: |
            test/performance/load-test-results.json
            test-results/
          retention-days: 30

  performance-regression:
    name: Performance Regression Analysis
    runs-on: ubuntu-latest
    needs: [lighthouse-audit, core-web-vitals, load-testing]
    if: always() && (github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Analyze performance regression
        run: |
          echo "🔍 Analyzing performance regression..."
          
          # Check if performance degraded significantly
          REGRESSION_DETECTED=false
          
          # Check Lighthouse results
          if [ -d "lighthouse-results" ]; then
            echo "📊 Lighthouse results found"
            # Add custom regression analysis for Lighthouse
          fi
          
          # Check Core Web Vitals
          if [ -f "core-web-vitals-results/test/performance/results.json" ]; then
            echo "📈 Core Web Vitals results found"
            # Add custom regression analysis for Core Web Vitals
          fi
          
          # Check Load Testing
          if [ -f "load-testing-results/test/performance/load-test-results.json" ]; then
            echo "🚀 Load testing results found"
            # Add custom regression analysis for Load Testing
          fi
          
          if [ "$REGRESSION_DETECTED" = true ]; then
            echo "🚨 Performance regression detected!"
            exit 1
          else
            echo "✅ No performance regression detected"
          fi

      - name: Create performance report
        run: |
          echo "📝 Creating performance report..."
          
          cat > performance-report.md << 'EOF'
          # Performance Test Report
          
          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ## Test Results Summary
          
          - ✅ Lighthouse Audit: Completed
          - ✅ Core Web Vitals: Completed  
          - ✅ Load Testing: Completed
          
          ## Performance Metrics
          
          ### Core Web Vitals Thresholds
          - First Contentful Paint (FCP): < 1.8s
          - Largest Contentful Paint (LCP): < 2.5s
          - First Input Delay (FID): < 100ms
          - Cumulative Layout Shift (CLS): < 0.1
          - Time to Interactive (TTI): < 3.8s
          
          ### Load Testing Criteria
          - Success Rate: > 95%
          - Average Response Time: < 2s
          - Requests per Second: > 10
          
          [View detailed results in workflow artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md
          retention-days: 30

  notify-teams:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [performance-regression]
    if: always() && (failure() || github.event_name == 'schedule')
    
    steps:
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            Performance monitoring results for VideoPlanet:
            - Lighthouse Audit: ${{ needs.lighthouse-audit.result }}
            - Core Web Vitals: ${{ needs.core-web-vitals.result }}
            - Load Testing: ${{ needs.load-testing.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "🚨 Performance Regression Detected - VideoPlanet"
          body: |
            Performance regression detected in VideoPlanet application.
            
            Check the workflow results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            
            Please investigate and resolve the performance issues.
          to: ${{ secrets.PERFORMANCE_ALERT_EMAIL }}
          from: VideoPlanet Performance Monitor

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [notify-teams]
    if: always()
    
    steps:
      - name: Clean up old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get all artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            // Delete artifacts older than 30 days
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < thirtyDaysAgo) {
                console.log(`Deleting old artifact: ${artifact.name}`);
                await github.rest.actions.deleteArtifact({
                  owner,
                  repo,
                  artifact_id: artifact.id
                });
              }
            }