version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: videoplanet-postgres
    environment:
      POSTGRES_DB: videoplanet
      POSTGRES_USER: videoplanet
      POSTGRES_PASSWORD: videoplanet123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U videoplanet"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - videoplanet-network

  # Redis for Caching and Channels
  redis:
    image: redis:7-alpine
    container_name: videoplanet-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - videoplanet-network

  # Django Backend
  backend:
    build:
      context: ./vridge_back
      dockerfile: Dockerfile
    container_name: videoplanet-backend
    environment:
      DATABASE_URL: postgresql://videoplanet:videoplanet123@postgres:5432/videoplanet
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: local-development-secret-key-change-in-production
      DEBUG: "True"
      ALLOWED_HOSTS: "*"
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://frontend:3000
      DJANGO_SETTINGS_MODULE: config.settings
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_EMAIL: admin@videoplanet.com
      DJANGO_SUPERUSER_PASSWORD: admin123
    ports:
      - "8000:8000"
    volumes:
      - ./vridge_back:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        daphne -b 0.0.0.0 -p 8000 config.asgi:application
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - videoplanet-network

  # React Frontend
  frontend:
    build:
      context: ./vridge_front
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:8000
        REACT_APP_WS_URL: ws://localhost:8000/ws
    container_name: videoplanet-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000/ws
      REACT_APP_GOOGLE_CLIENT_ID: ${REACT_APP_GOOGLE_CLIENT_ID:-your-google-client-id}
      REACT_APP_KAKAO_API_KEY: ${REACT_APP_KAKAO_API_KEY:-your-kakao-api-key}
      CI: "false"
    ports:
      - "3000:3000"
    volumes:
      - ./vridge_front:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm start
    stdin_open: true
    tty: true
    networks:
      - videoplanet-network

  # Nginx (Optional - for production-like environment)
  nginx:
    image: nginx:alpine
    container_name: videoplanet-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/static
      - media_volume:/media
    depends_on:
      - backend
      - frontend
    networks:
      - videoplanet-network
    profiles:
      - production

  # pgAdmin for Database Management (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: videoplanet-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@videoplanet.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - videoplanet-network
    profiles:
      - tools

  # Redis Commander for Redis Management (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: videoplanet-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - videoplanet-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  pgadmin_data:
    driver: local

networks:
  videoplanet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16