import { createSlice, PayloadAction } from '@reduxjs/toolkit'

// TODO(human) - 3단계 프로젝트 일정 관리 타입 추가
export type SchedulePhaseType = 'planning' | 'shooting' | 'editing'
export type SchedulePhaseStatus = 'pending' | 'in-progress' | 'completed' | 'delayed'

export interface SchedulePhase {
  type: SchedulePhaseType
  startDate: string
  endDate: string
  status: SchedulePhaseStatus
  progress: number // 0-100
  estimatedDuration: number // in days
  actualDuration?: number // in days
  dependencies?: SchedulePhaseType[]
}

export interface ProjectSchedule {
  id: string
  projectId: number
  scheduleMode: 'auto' | 'manual'
  phases: SchedulePhase[]
  createdAt: string
  updatedAt: string
  autoGeneratedSettings?: {
    projectType: 'short-form' | 'long-form' | 'commercial' | 'documentary' | 'social-media'
    complexity: 'simple' | 'medium' | 'complex'
    teamSize: number
  }
}

export interface Project {
  id: number
  title: string
  description: string
  color: string
  createdAt: string
  updatedAt: string
  ownerId: number
  status: 'active' | 'completed' | 'archived'
  members: number[]
  schedule?: ProjectSchedule
}

interface ProjectState {
  projects: Project[]
  currentProject: Project | null
  isLoading: boolean
  error: string | null
}

const initialState: ProjectState = {
  projects: [],
  currentProject: null,
  isLoading: false,
  error: null,
}

const projectSlice = createSlice({
  name: 'project',
  initialState,
  reducers: {
    setProjects: (state, action: PayloadAction<Project[]>) => {
      state.projects = action.payload
      state.error = null
    },
    setCurrentProject: (state, action: PayloadAction<Project>) => {
      state.currentProject = action.payload
    },
    addProject: (state, action: PayloadAction<Project>) => {
      state.projects.push(action.payload)
    },
    updateProject: (state, action: PayloadAction<{ id: number; updates: Partial<Project> }>) => {
      const index = state.projects.findIndex(p => p.id === action.payload.id)
      if (index !== -1) {
        state.projects[index] = { ...state.projects[index], ...action.payload.updates }
      }
      if (state.currentProject?.id === action.payload.id) {
        state.currentProject = { ...state.currentProject, ...action.payload.updates }
      }
    },
    removeProject: (state, action: PayloadAction<number>) => {
      state.projects = state.projects.filter(p => p.id !== action.payload)
      if (state.currentProject?.id === action.payload) {
        state.currentProject = null
      }
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.isLoading = action.payload
    },
    setError: (state, action: PayloadAction<string>) => {
      state.error = action.payload
      state.isLoading = false
    },
    // 일정 관리 액션들
    setProjectSchedule: (state, action: PayloadAction<{ projectId: number; schedule: ProjectSchedule }>) => {
      const { projectId, schedule } = action.payload
      const projectIndex = state.projects.findIndex(p => p.id === projectId)
      if (projectIndex !== -1) {
        state.projects[projectIndex].schedule = schedule
      }
      if (state.currentProject?.id === projectId) {
        state.currentProject.schedule = schedule
      }
    },
    updatePhaseProgress: (state, action: PayloadAction<{ projectId: number; phaseType: SchedulePhaseType; progress: number; status?: SchedulePhaseStatus }>) => {
      const { projectId, phaseType, progress, status } = action.payload
      const project = state.projects.find(p => p.id === projectId)
      if (project?.schedule) {
        const phase = project.schedule.phases.find(p => p.type === phaseType)
        if (phase) {
          phase.progress = progress
          if (status) phase.status = status
          project.schedule.updatedAt = new Date().toISOString()
        }
      }
      if (state.currentProject?.id === projectId && state.currentProject.schedule) {
        const phase = state.currentProject.schedule.phases.find(p => p.type === phaseType)
        if (phase) {
          phase.progress = progress
          if (status) phase.status = status
          state.currentProject.schedule.updatedAt = new Date().toISOString()
        }
      }
    },
    updatePhaseDates: (state, action: PayloadAction<{ projectId: number; phaseType: SchedulePhaseType; startDate: string; endDate: string }>) => {
      const { projectId, phaseType, startDate, endDate } = action.payload
      const project = state.projects.find(p => p.id === projectId)
      if (project?.schedule) {
        const phase = project.schedule.phases.find(p => p.type === phaseType)
        if (phase) {
          phase.startDate = startDate
          phase.endDate = endDate
          project.schedule.updatedAt = new Date().toISOString()
        }
      }
      if (state.currentProject?.id === projectId && state.currentProject.schedule) {
        const phase = state.currentProject.schedule.phases.find(p => p.type === phaseType)
        if (phase) {
          phase.startDate = startDate
          phase.endDate = endDate
          state.currentProject.schedule.updatedAt = new Date().toISOString()
        }
      }
    },
  },
})

export const { 
  setProjects, 
  setCurrentProject, 
  addProject, 
  updateProject, 
  removeProject, 
  setLoading, 
  setError,
  setProjectSchedule,
  updatePhaseProgress,
  updatePhaseDates
} = projectSlice.actions
export const projectReducer = projectSlice.reducer