/**
 * K6 Load Testing Script for VideoPlanet
 * Tests application performance under various load conditions
 */

import http from 'k6/http';
import { check, sleep, group } from 'k6';
import { Rate, Trend, Counter } from 'k6/metrics';

// Custom metrics
const errorRate = new Rate('errors');
const responseTime = new Trend('response_time');
const requestCount = new Counter('requests');

// Test configuration
export const options = {
  stages: [
    // Ramp up
    { duration: '2m', target: 10 },   // Ramp to 10 users over 2 minutes
    { duration: '5m', target: 10 },   // Stay at 10 users for 5 minutes
    { duration: '2m', target: 20 },   // Ramp to 20 users over 2 minutes
    { duration: '5m', target: 20 },   // Stay at 20 users for 5 minutes
    { duration: '2m', target: 50 },   // Ramp to 50 users over 2 minutes
    { duration: '5m', target: 50 },   // Stay at 50 users for 5 minutes
    { duration: '2m', target: 100 },  // Ramp to 100 users over 2 minutes
    { duration: '5m', target: 100 },  // Stay at 100 users for 5 minutes
    // Ramp down
    { duration: '2m', target: 0 },    // Ramp down to 0 users over 2 minutes
  ],
  thresholds: {
    // Performance thresholds
    http_req_duration: ['p(95)<2000'],     // 95% of requests under 2s
    http_req_failed: ['rate<0.05'],        // Error rate under 5%
    http_req_receiving: ['p(95)<1000'],    // 95% of response times under 1s
    checks: ['rate>0.95'],                 // 95% of checks should pass
  },
};

const BASE_URL = 'http://localhost:3005';

// Test scenarios
export default function() {
  // User session simulation
  group('User Journey - Home to Dashboard', () => {
    // Step 1: Visit home page
    let response = http.get(`${BASE_URL}/`);
    check(response, {
      'home page loads': (r) => r.status === 200,
      'home page response time OK': (r) => r.timings.duration < 2000,
    });
    recordMetrics(response);
    sleep(Math.random() * 2 + 1); // Random delay 1-3 seconds

    // Step 2: Navigate to login
    response = http.get(`${BASE_URL}/login`);
    check(response, {
      'login page loads': (r) => r.status === 200,
      'login page response time OK': (r) => r.timings.duration < 2000,
    });
    recordMetrics(response);
    sleep(Math.random() * 2 + 1);

    // Step 3: Navigate to dashboard (simulating logged in user)
    response = http.get(`${BASE_URL}/dashboard`);
    check(response, {
      'dashboard loads': (r) => r.status === 200,
      'dashboard response time OK': (r) => r.timings.duration < 3000,
    });
    recordMetrics(response);
    sleep(Math.random() * 3 + 2); // Longer stay on dashboard
  });

  group('API Performance Tests', () => {
    // Test performance analytics API
    let response = http.get(`${BASE_URL}/api/analytics/performance?type=summary`);
    check(response, {
      'analytics API responds': (r) => r.status === 200,
      'analytics API response time OK': (r) => r.timings.duration < 500,
      'analytics API returns valid JSON': (r) => {
        try {
          JSON.parse(r.body);
          return true;
        } catch {
          return false;
        }
      },
    });
    recordMetrics(response);

    // Test monitoring alerts API
    response = http.get(`${BASE_URL}/api/monitoring/alerts?limit=10`);
    check(response, {
      'alerts API responds': (r) => r.status === 200,
      'alerts API response time OK': (r) => r.timings.duration < 500,
    });
    recordMetrics(response);

    sleep(1);
  });

  group('File Operations', () => {
    // Test file upload demo page
    let response = http.get(`${BASE_URL}/file-upload-demo`);
    check(response, {
      'file upload page loads': (r) => r.status === 200,
      'file upload page response time OK': (r) => r.timings.duration < 2000,
    });
    recordMetrics(response);

    // Simulate file upload (POST request)
    const fileData = 'x'.repeat(1024 * 50); // 50KB test file
    response = http.post(`${BASE_URL}/api/file-upload`, {
      file: http.file(fileData, 'test-file.txt', 'text/plain'),
    });
    check(response, {
      'file upload succeeds or handled': (r) => r.status === 200 || r.status === 404, // 404 is OK if endpoint doesn't exist yet
    });
    recordMetrics(response);

    sleep(Math.random() * 2 + 1);
  });

  group('Static Assets Performance', () => {
    // Test static asset loading
    const assets = [
      '/images/Common/logo.svg',
      '/images/Home/bg01.png',
      '/images/User/bg.png',
    ];

    assets.forEach(asset => {
      let response = http.get(`${BASE_URL}${asset}`);
      check(response, {
        [`asset ${asset} loads`]: (r) => r.status === 200 || r.status === 404, // 404 OK if asset doesn't exist
        [`asset ${asset} fast`]: (r) => r.timings.duration < 1000,
      });
      recordMetrics(response);
    });

    sleep(0.5);
  });

  // Random user behavior
  if (Math.random() < 0.3) {
    // 30% chance to visit projects page
    group('Projects Page Visit', () => {
      let response = http.get(`${BASE_URL}/projects`);
      check(response, {
        'projects page loads': (r) => r.status === 200,
        'projects page response time OK': (r) => r.timings.duration < 2000,
      });
      recordMetrics(response);
      sleep(Math.random() * 4 + 2);
    });
  }

  if (Math.random() < 0.2) {
    // 20% chance to visit feedback page
    group('Feedback Page Visit', () => {
      let response = http.get(`${BASE_URL}/feedback`);
      check(response, {
        'feedback page loads': (r) => r.status === 200,
        'feedback page response time OK': (r) => r.timings.duration < 2000,
      });
      recordMetrics(response);
      sleep(Math.random() * 3 + 1);
    });
  }

  if (Math.random() < 0.1) {
    // 10% chance to visit performance dashboard
    group('Performance Dashboard Visit', () => {
      let response = http.get(`${BASE_URL}/performance-dashboard`);
      check(response, {
        'performance dashboard loads': (r) => r.status === 200,
        'performance dashboard response time OK': (r) => r.timings.duration < 3000,
      });
      recordMetrics(response);
      sleep(Math.random() * 5 + 3);
    });
  }
}

// Record custom metrics
function recordMetrics(response) {
  requestCount.add(1);
  responseTime.add(response.timings.duration);
  errorRate.add(response.status >= 400);
}

// Setup function (runs once at the beginning)
export function setup() {
  console.log('🚀 Starting K6 load test for VideoPlanet');
  console.log(`📊 Target URL: ${BASE_URL}`);
  
  // Verify that the application is running
  let response = http.get(`${BASE_URL}/`);
  if (response.status !== 200) {
    throw new Error(`Application not responding at ${BASE_URL}. Status: ${response.status}`);
  }
  
  console.log('✅ Application is responding, starting load test...');
  return { baseUrl: BASE_URL };
}

// Teardown function (runs once at the end)
export function teardown(data) {
  console.log('🏁 K6 load test completed');
  console.log('📈 Check the results above for performance metrics');
  
  // You could send results to a monitoring system here
  // Example: http.post('https://your-monitoring-system.com/k6-results', JSON.stringify(data));
}