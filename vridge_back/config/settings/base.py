"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import dj_database_url
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-4(7b%fv3+tc0ptvzu9j2yh9)wotp(lty83a^b)d$79^+r(=trg')

DEBUG = os.environ.get('DEBUG', 'False').lower() in ('true', '1', 'yes')

ALLOWED_HOSTS = os.environ.get(
    'ALLOWED_HOSTS', 
    'api.vlanet.net,vlanet.net,localhost,127.0.0.1,*.railway.app'
).split(',')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS if host.strip()]

# Application definition

DJANGO_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

PROJECT_APPS = [
    "core",  # Core utilities and managers must come first
    "users",  # User model that may be referenced by other apps
    "projects",
    "feedbacks", 
    "onlines",
]

THIRD_PARTY_APPS = [
    "channels",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
]

INSTALLED_APPS = DJANGO_APPS + PROJECT_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Static file serving for Railway
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",)
}

REST_USE_JWT = True

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=28),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": os.environ.get('ALGORITHM', 'HS256'),
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"

# Redis configuration with fallback
REDIS_URL = os.environ.get('REDIS_URL')
if REDIS_URL:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [REDIS_URL],
            },
        },
    }
else:
    # Fallback to in-memory channel layer when Redis is not available
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        }
    }

# Database configuration
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    # Fallback to SQLite for local development
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True  # False 로 설정해야 DB에 변경 된 TIME_ZONE 이 반영 됨

STATIC_URL = "/static/"  # 접두사
STATIC_ROOT = BASE_DIR / "staticfiles"  # collectstatic으로 수집된 파일들이 저장되는 디렉토리
STATICFILES_DIRS = []  # 정적 파일을 찾을 수 있는 추가적인 디렉토리 경로
if os.path.exists(BASE_DIR / "static"):
    STATICFILES_DIRS.append(BASE_DIR / "static")

# WhiteNoise configuration for better static file handling
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_URL = "/media/"
# Use /data/media for Railway persistent volume
MEDIA_ROOT = os.environ.get('MEDIA_ROOT', '/data/media' if os.path.exists('/data') else str(BASE_DIR / 'media'))

DATA_UPLOAD_MAX_NUMBER_FIELDS = 200000

MAX_UPLOAD_SIZE = 429916160

# Sentry configuration (optional)
SENTRY_DSN = os.environ.get('SENTRY_DSN')
if SENTRY_DSN and not DEBUG:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
        send_default_pii=True,
    )

if not DEBUG:
    LOG_FILE = os.environ.get('LOG_FILE', '/tmp/django.log')
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "standard": {"format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"},
        },
        "handlers": {
            "null": {
                "level": "DEBUG",
                "class": "logging.NullHandler",
            },
            "logfile": {
                "level": "INFO",
                "class": "logging.handlers.TimedRotatingFileHandler",
                "filename": LOG_FILE,
                "when": "midnight",  # 매 자정마다
                "backupCount": 31,
                "formatter": "standard",
            },
            "console": {
                "level": "INFO",
                "class": "logging.StreamHandler",
                "formatter": "standard",
            },
        },
        # Loggers (where does the log come from)
        "loggers": {
            "repackager": {
                "handlers": ["console", "logfile"],
                "level": "DEBUG",
                "propagate": True,
            },
            "django": {
                "handlers": ["console", "logfile"],
                "propagate": True,
                "level": "WARN",
            },
            "django.server": {
                "handlers": ["console", "logfile"],
                "propagate": True,
                "level": "INFO",
            },
            "django.db.backends": {
                "handlers": ["console", "logfile"],
                "level": "WARN",
                "propagate": False,
            },
            "": {
                "handlers": ["console", "logfile"],
                "level": "DEBUG",
            },
            "raven": {
                "level": "DEBUG",
                "handlers": ["console"],
                "propagate": False,
            },
            "sentry.errors": {
                "level": "DEBUG",
                "handlers": ["console"],
                "propagate": False,
            },
            "gunicorn.error": {
                "level": "CRITICAL",
                "handlers": ["logfile"],
                "propagate": True,
            },
            "gunicorn.error": {
                "level": "INFO",
                "handlers": ["logfile"],
                "propagate": True,
            },
            "gunicorn.access": {
                "level": "INFO",
                "handlers": ["logfile"],
                "propagate": False,
            },
            "django.request": {
                "handlers": ["logfile"],
                "level": "ERROR",
                "propagate": False,
            },
        },
    }


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# from django.conf import global_settings

AUTH_USER_MODEL = "users.User"

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False
# Parse CORS origins from environment
cors_origins = os.environ.get('CORS_ALLOWED_ORIGINS', 'https://vlanet.net,http://localhost:3000').split(',')
CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins if origin.strip()]

CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
)
CORS_ALLOW_HEADERS = (
    "accept",
    "KA",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
)
CORS_ALLOW_HEADERS = list(default_headers) + ["vridge_session"]

# Email Configuration
SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@vlanet.net')
DEFAULT_FROM_NAME = os.environ.get('DEFAULT_FROM_NAME', 'Vlanet')

# Use SendGrid if API key is available, otherwise fall back to console backend for development
if SENDGRID_API_KEY:
    # Using custom SendGrid backend
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = 'smtp.sendgrid.net'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = 'apikey'
    EMAIL_HOST_PASSWORD = SENDGRID_API_KEY
else:
    # Fallback for development without SendGrid
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# USE_X_FORWARDED_HOST = True
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# CSRF trusted origins
CSRF_TRUSTED_ORIGINS = ['https://vlanet.net', 'https://*.railway.app', 'http://localhost:3000']
if os.environ.get('RAILWAY_PUBLIC_DOMAIN'):
    CSRF_TRUSTED_ORIGINS.append(f"https://{os.environ.get('RAILWAY_PUBLIC_DOMAIN')}")